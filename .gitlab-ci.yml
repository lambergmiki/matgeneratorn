.before_script_ssh_setup: &before_script_ssh_setup
  # Ensure ssh-agent is installed and started, essential for managing SSH keys.
  # (Change apt-get to yum if using an RPM-based image)
  - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )

  # Start the ssh-agent in the background.
  - eval $(ssh-agent -s)

  # Add the SSH private key stored in the SSH_PRIVATE_KEY variable to the ssh-agent.
  # Using 'tr' to remove carriage return characters for compatibility with ed25519 keys.
  # Reference: https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

  # Create the .ssh directory and set the correct permissions.
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  # Use ssh-keyscan to add the remote server's SSH key to the known_hosts file.
  # This prevents SSH from prompting for approval of the remote server's key.
  - ssh-keyscan -H $PRODUCTION_HOST >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

# Specify the Docker image to be used for the jobs, which supports Docker commands.
image: docker:27-cli

# Define the stages of the pipeline and their order of execution.
stages:
  - test
  - deploy

# Lints the code in the test stage, can run in parallel with sum-test.
lint-test:
  stage: test
  image: node:20 # necessary for having access to node + npm
  script:
    - echo "Running lint..."
    - npm ci # necessary for installing dependencies, ESLint in this case
    - npm run lint
    - echo "Lint passed!"

# Example test to try automated testing with Jest.
sum-test:
  stage: test
  image: node:20 # necessary for having access to node + npm
  script:
    - echo "Running first automated example test - calculating sum of a and b..."
    - npm ci # necessary for installing dependencies, Jest in this case.
    - npm test
    - echo "Test passed!"

deploy:
  stage: deploy
  environment:
    name: production
    url: https://$PRODUCTION_HOST
  variables:
    REMOTE_HOST: $PRODUCTION_HOST
    DOCKER_HOST: ssh://ubuntu@$REMOTE_HOST
  before_script: *before_script_ssh_setup
  script:
    - echo "Deploying to production..."
    - ssh ubuntu@$PRODUCTION_HOST "cd ~/1dv613/matgeneratorn && git pull origin main"
    - ssh ubuntu@$PRODUCTION_HOST "cd ~/1dv613/matgeneratorn && docker compose -f docker-compose.yaml up --build -d"